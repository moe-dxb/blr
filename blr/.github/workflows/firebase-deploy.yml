name: Firebase Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      CI: true
      FIREBASE_CLI_EXPERIMENTS: webframeworks
      NODE_OPTIONS: --max-old-space-size=4096
      ENABLE_GCIP_BLOCKING: 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

      - name: Install Firebase CLI
        run: npm i -g firebase-tools

      - name: Enable Firebase webframeworks experiment
        run: |
          firebase --version
          firebase experiments:list || true
          firebase experiments:enable webframeworks
          firebase experiments:list || true

      - name: Show Firebase project context
        env:
          PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          echo "Using FIREBASE_PROJECT_ID=$PROJECT_ID"
          firebase projects:list || true

      - name: Install root dependencies (lockfile-safe)
        run: |
          npm ci || npm install --no-audit --no-fund

      - name: Create .env.local for Next.js
        run: |
          cat > .env.local << 'EOF'
          NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
          EOF

      - name: Optional build (Next.js)
        run: |
          if npm run | grep -q "build"; then npm run build || true; else echo "No build script"; fi
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Deploy Firestore and Storage Rules
        env:
          PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          firebase deploy --non-interactive --only firestore:rules,storage --project $PROJECT_ID

      - name: Build Functions (if present)
        run: |
          if [ -d functions ]; then
            echo "Building Cloud Functions..."
            cd functions
            npm install --no-audit --no-fund
            if npm run | grep -q "build"; then npm run build; else echo "No build script found, skipping build"; fi
          else
            echo "No functions directory; skipping functions build."
          fi

      - name: Clean up legacy GCIP blocking functions when not enabled
        env:
          PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          if [ "${{ env.ENABLE_GCIP_BLOCKING }}" != "true" ]; then
            echo "Deleting legacy auth blocking functions (non-GCIP project)..."
            firebase functions:delete enforceWorkspaceDomainOnCreate --region us-central1 --force --project $PROJECT_ID || true
            firebase functions:delete enforceWorkspaceDomainOnSignIn --region us-central1 --force --project $PROJECT_ID || true
          else
            echo "GCIP blocking enabled; skipping deletion."
          fi

      - name: Deploy Functions and Hosting
        env:
          PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          if [ -d functions ]; then
            firebase deploy --non-interactive --only functions,hosting --project $PROJECT_ID
          else
            firebase deploy --non-interactive --only hosting --project $PROJECT_ID
          fi