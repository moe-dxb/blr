rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function isSignedIn() {
      return request.auth != null;
    }
    function isSelf(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }
    function myRole() {
      return get(/databases/$(db)/documents/users/$(request.auth.uid)).data.role;
    }
    function isAdmin() { return myRole() == 'admin'; }
    function isHR()    { return ['hr','admin'].hasOnly([myRole()]) == false && (myRole() == 'hr' || myRole() == 'admin'); }
    function isMgrOf(uid) {
      // managers can access their directs (denormalize managerId in users)
      return isSignedIn() && get(/databases/$(db)/documents/users/$(uid)).data.managerId == request.auth.uid;
    }

    // USERS
    match /users/{uid} {
      allow read: if isSelf(uid) || isHR() || isAdmin() || isMgrOf(uid);
      allow update: if isSelf(uid); // self-edit limited fields - enforce in CF or use field masks
      allow create: if isHR() || isAdmin();
      allow delete: if false;
    }

    // LEAVE
    match /leaveRequests/{id} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || isHR()
                   || (isSignedIn() && (
                        resource.data.userId == request.auth.uid ||
                        isMgrOf(resource.data.userId)
                      ));
      allow update, delete: if isAdmin() || isHR() ||
                            (isSignedIn() && resource.data.userId == request.auth.uid && resource.data.status in ['draft','withdrawn']);
    }

    // EXPENSES
    match /expenseClaims/{id} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || isHR()
                   || (isSignedIn() && (
                        resource.data.userId == request.auth.uid ||
                        isMgrOf(resource.data.userId)
                      ));
      allow update, delete: if isAdmin() || isHR() ||
                            (isSignedIn() && resource.data.userId == request.auth.uid && resource.data.status in ['draft','rejected']);
    }

    // TIMESHEETS
    match /timesheets/{id} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || isHR() || (isSignedIn() && (
                   resource.data.userId == request.auth.uid || isMgrOf(resource.data.userId)));
      allow update: if isAdmin() || isHR() ||
                    (isSignedIn() && resource.data.userId == request.auth.uid && !resource.data.locked);
      allow delete: if false;
    }

    // NOTIFICATIONS (targeted)
    match /notifications/{id} {
      allow read: if isSignedIn() && (resource.data.toUid == request.auth.uid || isAdmin() || isHR());
      allow create: if isAdmin() || isHR(); // usually via CF
      allow update: if isSignedIn() && (resource.data.toUid == request.auth.uid); // mark read
      allow delete: if false;
    }

    // AUDIT (read-only to HR/Admin)
    match /auditLogs/{id} {
      allow read: if isHR() || isAdmin();
      allow write: if false; // writes only via CF Admin SDK
    }

    // DEFAULT DENY
    match /{document=**} { allow read, write: if false; }
  }
}