rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isManagerOf(employeeId) {
      let employeeDocExists = exists(/databases/$(database)/documents/users/$(employeeId));
      let managerId = get(/databases/$(database)/documents/users/$(employeeId)).data.managerId;
      return isAuthenticated() && employeeDocExists && managerId == request.auth.uid;
    }

    // users
    match /users/{userId} {
      allow read: if isOwner(userId) || isManagerOf(userId) || hasRole('Admin');
      allow create: if isOwner(userId);
      allow update: if (isOwner(userId) && isUpdatingOwnProfile(request.resource.data)) || hasRole('Admin');
      allow delete: if hasRole('Admin');

      function isUpdatingOwnProfile(data) {
        let modifiableFields = ['displayName', 'phoneNumber', 'photoURL', 'address', 'emergencyContact'];
        return data.keys().hasOnly(modifiableFields);
      }

      // Personal documents subcollection: restricted to owner + manager + admin
      match /personalDocuments/{docId} {
        allow read: if isOwner(userId) || isManagerOf(userId) || hasRole('Admin');
        allow create: if isOwner(userId);
        allow update, delete: if isOwner(userId) || hasRole('Admin');
      }
    }

    // Attendance under users
    match /users/{userId}/attendance/{recordId} {
      function isValidAttendanceRecord(data) {
        return data.keys().hasAll(['clockInTime', 'clockOutTime']) &&
               data.keys().size() >= 2 &&
               data.clockInTime is timestamp &&
               (data.clockOutTime is timestamp || data.clockOutTime == null);
      }

      allow read, create, update: if isOwner(userId);
      allow delete: if false;

      allow create: if isOwner(userId) && isValidAttendanceRecord(request.resource.data);
      allow update: if isOwner(userId) && (
        request.resource.data.clockOutTime is timestamp &&
        request.resource.data.clockInTime == resource.data.clockInTime
      );
    }

    // leaveRequests
    match /leaveRequests/{requestId} {
      function isValidNewLeaveRequest(data) {
        return data.keys().hasAll(['userId', 'leaveType', 'startDate', 'endDate', 'status', 'requestedAt']) &&
               data.status == 'pending' &&
               data.startDate is timestamp &&
               data.endDate is timestamp &&
               data.leaveType is string;
      }

      allow read: if isOwner(resource.data.userId) || isManagerOf(resource.data.userId) || hasRole('Admin');
      allow create: if isOwner(request.resource.data.userId) && isValidNewLeaveRequest(request.resource.data);
      allow update: if (isOwner(resource.data.userId) && resource.data.status == 'pending') || isManagerOf(resource.data.userId) || hasRole('Admin');
      allow delete: if (isOwner(resource.data.userId) && resource.data.status == 'pending') || hasRole('Admin');
    }

    // announcements + acknowledgements
    match /announcements/{id} {
      allow read: if isAuthenticated();
      allow create, update, delete: if hasRole('Admin');

      match /acks/{uid} {
        allow read: if isOwner(uid) || hasRole('Admin');
        allow create: if isOwner(uid);
        allow update, delete: if false;
      }
    }

    // policies + acknowledgements
    match /policies/{id} {
      allow read: if isAuthenticated();
      allow create, update, delete: if hasRole('Admin');

      match /acks/{uid} {
        allow read: if isOwner(uid) || hasRole('Admin');
        allow create: if isOwner(uid);
        allow update, delete: if false;
      }
    }

    // wellbeing events + RSVPs
    match /wellbeingEvents/{eventId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if hasRole('Admin');

      match /rsvps/{uid} {
        allow read: if isOwner(uid) || hasRole('Admin');
        allow create, update: if isOwner(uid);
        allow delete: if false;
      }
    }

    // community
    match /communityPosts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.authorId) || hasRole('Admin');
      allow delete: if isOwner(resource.data.authorId) || hasRole('Admin');

      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isOwner(resource.data.authorId) || hasRole('Admin');
      }

      match /reactions/{uid} {
        allow read: if isAuthenticated();
        allow create, update: if isOwner(uid);
        allow delete: if isOwner(uid) || hasRole('Admin');
      }
    }

    // schedules
    match /schedules/{userId} {
      allow read: if isOwner(userId) || isManagerOf(userId) || hasRole('Admin');
      allow create, update: if isOwner(userId) || isManagerOf(userId) || hasRole('Admin');
      allow delete: if hasRole('Admin');
    }

    // leave balances (functions/admin only)
    match /leaveBalances/{userId} {
      allow read: if isOwner(userId) || isManagerOf(userId) || hasRole('Admin');
      allow write: if hasRole('Admin');
    }

    // settings singleton (admin only)
    match /settings/{id} {
      allow read: if isAuthenticated();
      allow write: if hasRole('Admin');
    }

    // audit logs (write by functions only; read admin)
    match /auditLogs/{id} {
      allow create: if false; // only via Functions/Admin SDK
      allow read: if hasRole('Admin');
      allow update, delete: if false;
    }
  }
}